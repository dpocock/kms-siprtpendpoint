{
  "remoteClasses": [
    {
      "name": "SipRtpEndpoint",
      "extends": "BaseRtpEndpoint",
      "doc": "Endpoint that provides the same functionality and features that :rom:cls:`RtpEndpoint` providing SDP renegotiation features that allow easy implementation of <a href='https://tools.ietf.org/html/draft-ietf-sip-183-00'>SIP 183</a> like flows. This endpoint inherits from :rom:cls:`BaseRtpEndpoint`
      </p>
      <p>
      It is however recommended that if you do not need any renegotation feature, to use the :rom:cls:`RtpEndpoint` to avoid unneeded overload due to the components instatiated to allow renegotiation. 
      </p>
      <p>
      The API and methods to establish a RTP/SRTP communication are exactly the same as in :rom:cls:`RtpEndpoint`
      <p>
      Unlike :rom:cls:`RtpEndpoint` this endpoint allows calling the SDP negotiation methods `generateOffer`, `processOffer` and `processOffer`
      at any time regardless of the status of any previous SDP negotiation.
      </p>
      When any of the SDP negotiation methods are called and no previous negotiation has been made, the same rules that apply to 
      :rom:cls:`RtpEndpoint` will apply now.
      </p>
      <p>
      If any of the SDP negotiation methods are called and a previous negotiation were initiated (it does not matter if it is completed and media flowing or not)
      the previous media is discarded and new media will be established according to the new SDP (offer or answer) exchanged.
      </p>
      <p>
      More specifically:
      <ul style='list-style-type:circle'>
        <li>`generateOffer`, if this method is called with a previous negotiation initiated or even completed, the old media will be discarded and a new SDP offer will be generated. much like it would be done with a new RtpEndpoint. Ports and SSRC may change. Codecs will usually not change</li>
        <li>`processOffer`, much like the previous one, if a previous negotiation was initiated or even completed, media will be discarded, ports and ssrcs may also change as it will be answering to a different SDP offer</li>
        <li>`processAnswer`, similar to the previous this has some subtelties, as we are processing a new answer, original offer is maintained, this implies that ports, ssrcs and codecs offered by this endpoint are preserved. This implies that this new answer must be generated as a response to the original offer</li>
      </ul>
      </p>
      <p>
      If the answer changes chosen codecs, it may be possible that the endpoint processing the answer also instantiates a transcoder to adapt to the new codecs. 
      This is needed because, if the original negotiation established some codecs, this affect at the pipeline and any other connected media Element. 
      So, if renegotiation implies some change in codecs, the pipeline cannot change codecs in the other MediaElements, so a transocding is needed to adapt media with new codecs to the 
      already established ones.
      </p>
      ",
      "constructor":
        {
          "doc": "Builder for the :rom:cls:`SipRtpEndpoint`",
          "params": [
            {
              "name": "mediaPipeline",
              "doc": "the :rom:cls:`MediaPipeline` to which the endpoint belongs",
              "type": "MediaPipeline"
            },
            {
              "name": "crypto",
              "doc": "SDES-type param. If present, this parameter indicates that the communication will be encrypted. By default no encryption is used. This behaves exactly the same as the crypto builder parameter for RtpEndpoint.",
              "type": "SDES",
              "optional": true,
              "defaultValue": {}
            },
            {
              "name": "useIpv6",
              "doc": "This configures the endpoint to use IPv6 instead of IPv4.",
              "type": "boolean",
              "optional": true,
              "defaultValue": false
            }
          ]
        },
      "events": [
        "OnKeySoftLimit"
      ]
    }
  ],
  "events": [
    {
      "name": "OnKeySoftLimit",
      "doc": "Fired when encryption is used and any stream reached the soft key usage limit, which means it will expire soon.",
      "extends": "Media",
      "properties": [
        {
          "name": "mediaType",
          "doc": "The media stream",
          "type": "MediaType"
        }
      ]
    }
  ]
}
